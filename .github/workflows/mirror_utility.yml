name: Mirror

on:
  push:
    paths:
    - .github/workflows/mirror_utility.yml
  schedule:
  - cron: 0 0 * * 0
  workflow_dispatch:

permissions:
  contents: write  # TODO: remove

env:
  LOCAL_REPOSITORY: ${{ github.repository }}
  LOCAL_BRANCH: automation/mirror-utility
  REMOTE_REPOSITORY: ShineyDev/utility

  AUTH_EMAIL: github-actions[bot]@users.noreply.github.com
  AUTH_NAME: github-actions[bot]
  AUTH_TOKEN: ${{ github.token }}

  COMMIT_MESSAGE: update mirror of ShineyDev/utility
  PULL_LABELS: A:mirror

  EXCLUDES: py.typed
  LOCAL_MIRROR_PATH: ${{ github.event.repository.name }}/utility/_mirror
  REMOTE_MIRROR_PATH: utility

jobs:
  job:
    name: Mirror
    runs-on: ubuntu-latest

    if: github.repository_owner == 'ShineyDev'

    steps:
    - name: Checkout ${{ env.LOCAL_REPOSITORY }}
      uses: actions/checkout@v4
      with:
        path: local

    - name: Checkout ${{ env.REMOTE_REPOSITORY }}
      uses: actions/checkout@v4
      with:
        path: remote
        repository: ${{ env.REMOTE_REPOSITORY }}
        token: ${{ env.AUTH_TOKEN }}

    - name: Mirror
      run: |-
        rm -fr local/${{ env.LOCAL_MIRROR_PATH }}
        mkdir -p local/${{ env.LOCAL_MIRROR_PATH }}
        cp -a remote/${{ env.REMOTE_MIRROR_PATH }}/. local/${{ env.LOCAL_MIRROR_PATH }}/
        export IFS=";"
        for file in "${{ env.EXCLUDES }}"; do
            rm local/${{ env.LOCAL_MIRROR_PATH }}/$file
        done

    - name: Push
      continue-on-error: true  # TODO: remove
      working-directory: local
      run: |-
        git config user.email ${{ env.AUTH_EMAIL }}
        git config user.name ${{ env.AUTH_NAME }}
        git add .
        git commit -m "${{ env.COMMIT_MESSAGE }}" -m "${{ env.REMOTE_REPOSITORY }}@$(echo $(cd ../remote; git rev-parse HEAD))"
        git remote set-url origin https://x-access-token:${{ env.AUTH_TOKEN }}@github.com/${{ env.LOCAL_REPOSITORY }}
        git push --force-with-lease  # origin HEAD:${{ env.LOCAL_BRANCH }}

    # - name: Request
    #   uses: actions/github-script@v7
    #   with:
    #     script: |-
    #       let response;

    #       const owner = "${{ github.repository_owner }}";
    #       const repo = "${{ github.event.repository.name }}";

    #       response = github.rest.pulls.list({
    #         owner,
    #         repo,
    #         head: "${{ github.repository_owner }}:${{ env.LOCAL_BRANCH }}",
    #         state: "open",
    #       })

    #       if (!response.length) {
    #         response = github.rest.repos.get({
    #           owner,
    #           repo,
    #         });

    #         const default_branch = response.default_branch;

    #         response = github.rest.pulls.create({
    #           owner,
    #           repo,
    #           base: default_branch,
    #           head: "${{ env.LOCAL_BRANCH }}",
    #           title: "${{ env.COMMIT_MESSAGE }}",
    #         });

    #         const issue_number = response.number;

    #         response.rest.issues.addLabels({
    #           owner,
    #           repo,
    #           issue_number,
    #           labels: "${{ env.PULL_LABELS }}".split(";"),
    #         })
    #       }
