from typing import Any, ClassVar, Iterator, List, Tuple, Type

from ast import AST
from traceback import FrameSummary as _tb_FrameSummary
from types import FrameType, TracebackType


class Formatter():
    def __init__(self, **kwargs) -> None: ...

    def format_exception(self, exc_type: Type[BaseException], exc_value: BaseException, exc_traceback: TracebackType) -> Iterator[str]: ...

class TracebackFormatter(Formatter):
    cause_message: ClassVar[str]
    context_message: ClassVar[str]
    recursion_cutoff: ClassVar[int]
    traceback_message: ClassVar[str]
    traceback_frame_line_fmt: ClassVar[str]
    traceback_frame_location_fmt: ClassVar[str]
    traceback_frame_recursion_fmt: ClassVar[str]
    traceback_frame_scope_fmt: ClassVar[str]

    def extract(self, iterator: Iterator[FrameType], *, limit: int=..., capture_globals: bool=..., capture_locals: bool=..., lookup_lines: bool=...) -> List[FrameSummary]: ...
    def extract_stack(self, frame: FrameType, *, limit: int=..., capture_globals: bool=..., capture_locals: bool=..., lookup_lines: bool=...) -> List[FrameSummary]: ...
    def extract_traceback(self, exc_traceback: TracebackType, *, limit: int=..., capture_globals: bool=..., capture_locals: bool=..., lookup_lines: bool=...) -> List[FrameSummary]: ...

    def format_exc(self, *, limit: int=..., chain: bool=...) -> Iterator[str]: ...
    def format_exception(self, exc_type: Type[BaseException], exc_value: BaseException, exc_traceback: TracebackType, *, limit: int=..., chain: bool=...) -> Iterator[str]: ...
    def format_exception_only(self, exc_type: Type[BaseException], exc_value: BaseException) -> Iterator[str]: ...
    def format_frame_list(self, list: List[FrameType]) -> Iterator[str]: ...
    def format_frame(self, frame: FrameType, filename: str, lineno: int, name: str, line: int) -> Iterator[str]: ...
    def format_stack(self, frame: FrameType, *, limit: int=..., capture_globals: bool=..., capture_locals: bool=..., lookup_lines: bool=...) -> Iterator[str]: ...
    def format_traceback(self, exc_traceback: TracebackType, *, limit: int=..., capture_globals: bool=..., capture_locals: bool=..., lookup_lines: bool=...) -> Iterator[str]: ...

class DefaultFormatter(TracebackFormatter):
    def clean_filename(self, filename: str) -> str: ...
    def colorize(self, source: str, theme: str) -> str: ...
    def colorize_tree(self, tree: AST, line: str) -> str: ...
    def colorize_value(self, value: Any) -> str: ...
    def get_relevant_values(self, tree: AST, frame: FrameType) -> List[Tuple[int, Any]]: ...
    def inspect(self, tree: AST, frame: FrameType) -> Iterator[str]: ...

class FrameSummary(_tb_FrameSummary): ...
